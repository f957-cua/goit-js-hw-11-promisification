{"version":3,"sources":["webpack:///./data-js/index1.js","webpack:///./data-js/index2.js","webpack:///./data-js/index3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","obj","logError","warn","amount","catch"],"mappings":"2JAKMA,EAAQ,SAAAC,GAMV,OALgB,IAAIC,SAAQ,SAACC,GACzBC,YAAW,WACPD,EAAQF,KACTA,OAKLI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAM/B,OALgB,IAAIb,SAAQ,SAACC,GAGrBA,EAFiBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAMnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBlD,OAXgB,IAAIpB,SAAQ,SAACC,EAASwB,GAClCvB,YAAW,WACYoB,KAAKE,SAAW,GAG/BvB,EAAQ,CAACyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEvC2B,EAAON,EAAYO,MAEpB5B,OAKL6B,EAAa,SAACC,GAClBvB,QAAQC,IAAR,eAA2BsB,EAAIF,GAA/B,iBAAkDE,EAAIxB,KAAtD,OAGIyB,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAMFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,K","file":"main.702e72824f51fb1f458f.js","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms \r\n// миллисекунд.Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали \r\n// во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n    const promise = new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms);\r\n    })\r\n    return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    const promise = new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user);\r\n            resolve(updatedUsers);\r\n    })\r\n    return promise;\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            \r\n            if (canProcess) {\r\n                resolve({id: transaction.id, time: delay });\r\n            } else {\r\n            reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    })\r\n    return promise\r\n};\r\n\r\nconst logSuccess = (obj) => {\r\n  console.log(`Transaction ${obj.id} processed in ${obj.time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n//  * Должно работать так\r\n//  */\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}